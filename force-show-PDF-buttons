// ==UserScript==
// @name         PDF 隐藏按钮显示（Via 兼容增强）
// @namespace    https://github.com/botaothomaszhao/pkus-xny-ultra
// @version      1.1.0
// @license      MIT
// @description  在顶层页面中监听并修复 PDF 阅读器 iframe，强制显示被隐藏的下载/打印等按钮；加入重试与属性变更兼容以适配部分浏览器（如 Via）。
// @author       c-jeremy botaothomaszhao
// @match        *://bdfz.xnykcxt.com:5002/stu/*
// @run-at       document-start
// @grant        none
// ==/UserScript==

(function () {
  'use strict';

  const CSS =
    '[hidden]:not(#errorWrapper), button.hidden, div#editorModeButtons.hidden { display: block !important; }';

  function injectStyleInto(doc) {
    if (!doc) return false;
    try {
      const styleId = 'tampermonkey-pdf-button-fix';
      if (doc.getElementById(styleId)) return true;
      const style = doc.createElement('style');
      style.id = styleId;
      style.textContent = CSS;
      (doc.head || doc.documentElement).appendChild(style);
      return true;
    } catch (_) {
      return false;
    }
  }

  // 对单个 iframe 尝试多次注入（处理 WebView/Via 中 onload 与可访问时机不同步）
  function tryInject(iframe, { attempts = 60, interval = 150 } = {}) {
    if (!iframe) return;
    // 对明显受限的 sandbox 提前提示
    const sandbox = iframe.getAttribute('sandbox') || '';
    if (sandbox && !/\ballow-same-origin\b/.test(sandbox)) {
      // 无法访问同源上下文，注入大概率失败
      console.debug('[PDF Fix] iframe has sandbox without allow-same-origin:', sandbox);
    }

    let count = 0;
    const timer = setInterval(() => {
      count++;
      try {
        const doc =
          (iframe.contentDocument || iframe.contentWindow?.document) ?? null;
        if (doc && doc.readyState !== 'uninitialized') {
          if (injectStyleInto(doc)) {
            clearInterval(timer);
          }
        }
      } catch (e) {
        // 跨域/受限会抛异常，继续重试直到超时
      }
      if (count >= attempts) {
        clearInterval(timer);
      }
    }, interval);

    // 仍然监听 load，部分环境 load 触发点更可靠
    iframe.addEventListener('load', () => {
      try {
        injectStyleInto(iframe.contentDocument || iframe.contentWindow?.document);
      } catch (_) {}
    }, { once: false });
  }

  function watchIframes() {
    // 初始页面已有的 iframe
    document.querySelectorAll('iframe').forEach((f) => tryInject(f));

    // 监听新增节点
    const mo = new MutationObserver((muts) => {
      for (const mut of muts) {
        mut.addedNodes.forEach((node) => {
          if (node.nodeType !== 1) return;
          if (node.tagName === 'IFRAME') {
            tryInject(node);
          }
          node.querySelectorAll?.('iframe').forEach((f) => tryInject(f));
        });
      }
    });
    mo.observe(document.documentElement, { childList: true, subtree: true });

    // 监听 iframe src/sandbox 等属性变化，重新尝试注入
    const moAttr = new MutationObserver((muts) => {
      for (const mut of muts) {
        const el = mut.target;
        if (el && el.tagName === 'IFRAME') {
          tryInject(el);
        }
      }
    });
    // 属性变化需要显式注册到每个 iframe（以及新出现的 iframe）
    function attachAttrObserverToExisting() {
      document.querySelectorAll('iframe').forEach((f) => {
        moAttr.observe(f, { attributes: true, attributeFilter: ['src', 'sandbox'] });
      });
    }
    attachAttrObserverToExisting();
    // 同时在新增时也附加
    const moAddForAttr = new MutationObserver((muts) => {
      for (const mut of muts) {
        mut.addedNodes.forEach((node) => {
          if (node.nodeType !== 1) return;
          if (node.tagName === 'IFRAME') {
            moAttr.observe(node, { attributes: true, attributeFilter: ['src', 'sandbox'] });
          }
          node.querySelectorAll?.('iframe').forEach((f) => {
            moAttr.observe(f, { attributes: true, attributeFilter: ['src', 'sandbox'] });
          });
        });
      }
    });
    moAddForAttr.observe(document.documentElement, { childList: true, subtree: true });
  }

  if (document.readyState === 'loading') {
    // Via 等环境下，尽量等到 DOM 可观察后再挂载
    document.addEventListener('DOMContentLoaded', watchIframes, { once: true });
  } else {
    watchIframes();
  }
})();
